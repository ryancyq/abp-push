#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format
version: '{branch}.{build}'

# scripts that are called at very beginning, before repo cloning
init:
  - git config --global core.autocrlf input

# Do not build on tags (GitHub, Bitbucket, GitLab, Gitea)
skip_tags: false

# Start builds on tags only (GitHub, BitBucket, GitLab, Gitea)
#skip_non_tags: true

#---------------------------------#
#    environment configuration    #
#---------------------------------#

# Build worker image (VM template)
image: Visual Studio 2019

# this is how to allow failing jobs in the matrix
matrix:
  fast_finish: true     # set this flag to immediately finish build once one of the jobs fails.

# build cache to preserve files/folders between builds
cache:
  - packages -> **\packages.config  # preserve "packages" directory in the root of build folder but will reset it if packages.config is modified
  - projectA\libs
  - node_modules                    # local npm modules
  - '%LocalAppData%\NuGet\Cache'    # NuGet < v3
  - '%LocalAppData%\NuGet\v3-cache' # NuGet v3

# enable patching of AssemblyInfo.* files
assembly_info:
  patch: true
  file: AssemblyInfo.*
  assembly_version: "{version}"
  assembly_file_version: "{version}"
  assembly_informational_version: "{version}"

dotnet_csproj:
  patch: true
  file: '**\*.csproj'
  version: '{version}'
  package_version: '{version}'
  assembly_version: '{version}'
  file_version: '{version}'
  informational_version: '{version}'

#---------------------------------#
#       build configuration       #
#---------------------------------#

# build platform, i.e. x86, x64, Any CPU. This setting is optional.
platform: Any CPU

# to add several platforms to build matrix:
#platform:
#  - x86
#  - Any CPU

# build Configuration, i.e. Debug, Release, etc.
configuration: Release

# to add several configurations to build matrix:
#configuration:
#  - Debug
#  - Release

# Build settings, not to be confused with "before_build" and "after_build".
# "project" is relative to the original build directory and not influenced by directory changes in "before_build".
build:
  parallel: true                  # enable MSBuild parallel builds
  project: Abp.Push.sln      # path to Visual Studio solution or project
#  publish_wap: true               # package Web Application Projects (WAP) for Web Deploy
#  publish_wap_xcopy: true         # package Web Application Projects (WAP) for XCopy deployment
#  publish_wap_beanstalk: true     # Package Web Applications for AWS Elastic Beanstalk deployment
#  publish_wap_octopus: true       # Package Web Applications for Octopus deployment
#  publish_azure_webjob: true      # Package Azure WebJobs for Zip Push deployment
#  publish_azure: true             # package Azure Cloud Service projects and push to artifacts
  publish_aspnet_core: true       # Package ASP.NET Core projects
  publish_core_console: true      # Package .NET Core console projects
  publish_nuget: true             # package projects with .nuspec files and push to artifacts
  publish_nuget_symbols: true     # generate and publish NuGet symbol packages
#  include_nuget_references: true  # add -IncludeReferencedProjects option while packaging NuGet artifacts

  # MSBuild verbosity level
  #verbosity: quiet|minimal|normal|detailed
  verbosity: minimal
      
# scripts to run before build
before_build:
  - nuget restore

# to run your custom scripts instead of automatic MSBuild
build_script:

# scripts to run after build (working directory and environment changes are persisted from the previous steps)
after_build:

# scripts to run *after* solution is built and *before* automatic packaging occurs (web apps, NuGet packages, Azure Cloud Services)
before_package:

# to disable automatic builds
#build: off

#---------------------------------#
#       tests configuration       #
#---------------------------------#

# to run tests against all except selected assemblies and/or categories
#test:
#  assemblies:
#    except:
#      - asm1.dll
#      - asm2.dll
#
#  categories:
#    except:
#      - UI
#      - E2E

# scripts to run before tests (working directory and environment changes are persisted from the previous steps such as "before_build")
before_test:

# to run your custom scripts instead of automatic tests
test_script:

# scripts to run after tests
after_test:

# to disable automatic tests
#test: off

#---------------------------------#
#      artifacts configuration    #
#---------------------------------#

artifacts:

  # pushing a single file
  #- path: test.zip

  # pushing a single file with environment variable in path and "Deployment name" specified
  #- path: MyProject\bin\$(configuration)
  #  name: myapp

  # pushing entire folder as a zip archive
  #- path: logs

  # pushing all *.nupkg files in build directory recursively
  - path: 'nupkg\*.nupkg'
    name: 'Nuget Packages'
    
  # pushing generated assemblies
  - path: 'bin\$(configuration)\**\*.dll'
    name: 'Generated Assemblies'
  
#---------------------------------#
#     deployment configuration    #
#---------------------------------#

# providers: Local, FTP, WebDeploy, AzureCS, AzureBlob, S3, NuGet, Environment
# provider names are case-sensitive!
#deploy:
#    # Deploy to GitHub Releases
#  - provider: GitHub
#    artifact: /.*\.nupkg/           # upload all NuGet packages to release assets
#    draft: false
#    prerelease: false
#    on:
#      branch: master                # release from master branch only
#      APPVEYOR_REPO_TAG: true       # deploy on tag push only
  
# scripts to run before deployment
before_deploy:

# scripts to run after deployment
after_deploy:

# to run your custom scripts instead of provider deployments
deploy_script:

# to disable deployment
deploy: off

#---------------------------------#
#        global handlers          #
#---------------------------------#

# on successful build
on_success:

# on build failure
on_failure:

# after build failure or success
on_finish:

for:
- version: '3.1.0-{build}'
  branches:
    only: 
      - 3.x
  deploy:
      # Deploy to GitHub Releases
    - provider: GitHub
      artifact: /.*\.nupkg/           # upload all NuGet packages to release assets
      draft: false
      prerelease: false
      on:
        APPVEYOR_REPO_TAG: true       # deploy on tag push only
